package net.nenko.AuthNO;

public interface AuthNOR {

	void init();

	/**
	 * Authenticate pair (user and password)
	 *
	 * @return access token or null if wrong credentials
	 */
	String login(String user, String pass);

	/**
	 * Returns permissions bitmap
	 *
	 * @param token Access token, generated by login()
	 *
	 * @return 63 bits of permissions if token valid, or 0 for wrong token or -1 for expired token
	 */
	long permissions(String token);

	/**
	 * Checks if current token has permission to execute an action
	 *
	 * @param token Access token, generated by login()
	 * @param actionId one (or more) bits defining an action 
	 *
	 * @return 1 if authorized, 0 - not authorized, -1 - expired token, -2 - wrong token
	 */
	default int checkPermission(String token, long actionId) {
		long p = permissions(token);
		return p == -1L ? -1 : p == 0 ? -2 : 0 != (actionId & p) ? 1 : 0;
	}

	/**
	 * Checks if current token has permission to execute an action
	 *
	 * This version is convenient to check and return some error code in REST API
	 *
	 * @param token Access token, generated by login()
	 * @param actionId one (or more) bits defining an action
	 * @param notAutorized string code returned if token has no permissions 
	 * @param wrongToken string code returned if token rejected as unknown 
	 * @param expiredToken string code returned if token is known but expired 
	 *
	 * @return null if positive, and one of (notAuthorized, badToken, expiredToken) strings
	 */
	default String checkPermission(String token, long actionId, String notAuthorized, String wrongToken, String expiredToken) {
		long p = permissions(token);
		return p == -1L ? expiredToken : p == 0 ? wrongToken : 0 != (actionId & p) ? null : notAuthorized;
	}
	

}
